#### Build Docker 
- Para construir ejecutamos lo siguiente:
```
    docker build -t ms-frontend:1.0 frontend
    docker build -t ms-products:1.0 products
    docker build -t ms-shopping:1.0 shopping-cart
```
#### Prueba Local
    cd micro-service-name 
    npm install
    npm run
    

#### Iniciar los contenedores 
    docker run -d -p 3000:3000 \
    -e PRODUCTS_SERVICE=host.docker.internal \
    -e SHOPPING_CART_SERVICE=host.docker.internal \
    ms-frontend:1.0


    #### Script para crear los contenedores
    --------------------------------------------------------------------------------------------
    PRODUCTS_SERVICE=products
    SHOPPING_CART_SERVICE=shopping
    #### A las variables de entorno se les debe pasar el nombre del contenedor, en vez de localhost
    ----------------------------------------------------------------------------------------------
    docker run --name frontend -d -p 3000:3000 -e PRODUCTS_SERVICE=products -e SHOPPING_CART_SERVICE=shopping --network my-network ms-frontend:1.0

    docker run --name products -d -p 3001:3001 --network my-network ms-products:1.0

    docker run --name shopping -d -p 3002:3002 --network my-network ms-shopping-cart:1.0

#### Los contenedores deben compartir la misma network para evitar el problema del fetch:
docker run --name ms-frontend--network=my-network -p 3000:3000 -d ms-frontend:1.0
docker run --name ms-products --network=my-network -p 3001:3001 -d ms-products:1.0
docker run --name ms-shopping-cart --network=my-network -p 3002:3002 -d ms-shopping-cart:1.0

#### Crear una network:
docker network create my-network

#### Borrar una network:
docker network rm my-network

#### En listar los contenedores conectados a una network:
docker network inspect my-network --format='{{range .Containers}}{{.Name}} {{end}}'

docker network inspect final-bootcampdevops-ninja-v1_my-network --format='{{range .Containers}}{{.Name}} {{end}}'

#### Si deseas ver los logs en tiempo real, puedes agregar la opción -f al comando, de esta manera:
docker logs -f my-container

#### Ver el contenedor:
docker exec -it 'nombre-del-contenedor' sh
docker exec -it frontend sh
docker exec -it products sh

#### Para obtener la IP del contenedor:
docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' nombre-del-contenedor

docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' products
docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' shopping-cart

#### Para eliminar cualquier objeto no utilizado, incluyendo imágenes, contenedores, redes y volúmenes no utilizados:
docker system prune

#### Borrar todas las imagenes en un solo script:
docker rmi -f $(docker images -q)

#### Borrar todos los contenederos:
docker rm -f $(docker ps -a -q)

#### Estar dentro de un contenedor:
 docker exec -it nombre-del-contenedor  sh o bash
 docker exec -it frontend  sh

#### Para verificar que las variables de entorno se estén pasando correctamente al contenedor
 docker exec frontend printenv
 docker exec products printenv
 docker exec shopping printenv

#### Para asegurarte de que las variables de entorno estén establecidas correctamente en cada contenedor
 docker inspect ms-frontend --format '{{json .Config.Env}}'

#### Subir imagenes al perfil de Docker Hub
1.-Crear una imagen de Docker de tu aplicación
    docker build -t nombre-de-tu-imagen .

2.-Etiquetar la imagen con el nombre de usuario y el nombre de la imagen en Docker Hub.
    docker tag nombre-de-tu-imagen nombre-de-usuario/nombre-de-la-imagen

    docker tag ms-frontend:1.0 libiamfreitesm/ms-frontend:1.0
    docker tag ms-products:1.0 libiamfreitesm/ms-products:1.0
    docker tag ms-shopping:1.0 libiamfreitesm/ms-shopping:1.0

3.-Hacer login en Docker Hub desde la línea de comando de Docker.
    docker login
    
4.-Subir la imagen a Docker Hub.
    docker push nombre-de-usuario/nombre-de-la-imagen

     docker push libiamfreitesm/ms-frontend:1.0
     docker push libiamfreitesm/ms-products:1.0
     docker push libiamfreitesm/ms-shopping:1.0


#### Para borrar todas las imágenes de Docker de una vez, puedes usar el siguiente comando:
docker rmi -f $(docker images -q)

#### Para borrar todos los contenedores de Docker de una vez, puedes usar el siguiente comando:
docker rm -f $(docker ps -a -q)


#### Hacer ping entre contenedores
docker exec frontend ping product

